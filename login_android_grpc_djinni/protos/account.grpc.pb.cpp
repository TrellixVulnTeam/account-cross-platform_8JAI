// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: account.proto

#include "account.pb.h"
#include "account.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace account {

static const char* Account_method_names[] = {
  "/account.Account/requestUserLogin",
  "/account.Account/requestUserSign",
  "/account.Account/checkConnect",
  "/account.Account/requestLogout",
  "/account.Account/refreshToken",
};

std::unique_ptr< Account::Stub> Account::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Account::Stub> stub(new Account::Stub(channel));
  return stub;
}

Account::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_requestUserLogin_(Account_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestUserSign_(Account_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_checkConnect_(Account_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestLogout_(Account_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_refreshToken_(Account_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Account::Stub::requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::account::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestUserLogin_, context, request, response);
}

void Account::Stub::experimental_async::requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestUserLogin_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::AsyncrequestUserLoginRaw(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestUserLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::PrepareAsyncrequestUserLoginRaw(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestUserLogin_, context, request, false);
}

::grpc::Status Account::Stub::requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest& request, ::account::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestUserSign_, context, request, response);
}

void Account::Stub::experimental_async::requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestUserSign_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::AsyncrequestUserSignRaw(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestUserSign_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::PrepareAsyncrequestUserSignRaw(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestUserSign_, context, request, false);
}

::grpc::Status Account::Stub::checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::account::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_checkConnect_, context, request, response);
}

void Account::Stub::experimental_async::checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_checkConnect_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::AsynccheckConnectRaw(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_checkConnect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::PrepareAsynccheckConnectRaw(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_checkConnect_, context, request, false);
}

::grpc::Status Account::Stub::requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::account::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestLogout_, context, request, response);
}

void Account::Stub::experimental_async::requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestLogout_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::AsyncrequestLogoutRaw(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestLogout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::PrepareAsyncrequestLogoutRaw(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestLogout_, context, request, false);
}

::grpc::Status Account::Stub::refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::account::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_refreshToken_, context, request, response);
}

void Account::Stub::experimental_async::refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_refreshToken_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::AsyncrefreshTokenRaw(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_refreshToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::account::CodeReply>* Account::Stub::PrepareAsyncrefreshTokenRaw(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::account::CodeReply>::Create(channel_.get(), cq, rpcmethod_refreshToken_, context, request, false);
}

Account::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::account::LoginRequest, ::account::CodeReply>(
          std::mem_fn(&Account::Service::requestUserLogin), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::account::SignRequest, ::account::CodeReply>(
          std::mem_fn(&Account::Service::requestUserSign), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::account::ConnectRequest, ::account::CodeReply>(
          std::mem_fn(&Account::Service::checkConnect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::account::LogoutRequest, ::account::CodeReply>(
          std::mem_fn(&Account::Service::requestLogout), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::account::RefreshRequest, ::account::CodeReply>(
          std::mem_fn(&Account::Service::refreshToken), this)));
}

Account::Service::~Service() {
}

::grpc::Status Account::Service::requestUserLogin(::grpc::ServerContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Account::Service::requestUserSign(::grpc::ServerContext* context, const ::account::SignRequest* request, ::account::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Account::Service::checkConnect(::grpc::ServerContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Account::Service::requestLogout(::grpc::ServerContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Account::Service::refreshToken(::grpc::ServerContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace account

