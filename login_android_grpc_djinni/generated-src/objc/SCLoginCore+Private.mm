// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from demo.djinni

#import "SCLoginCore+Private.h"
#import "SCLoginCore.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "SCLoginListener+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface SCLoginCore ()

- (id)initWithCpp:(const std::shared_ptr<::demo::LoginCore>&)cppRef;

@end

@implementation SCLoginCore {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::demo::LoginCore>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::demo::LoginCore>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable SCLoginCore *)create:(nullable id<SCLoginListener>)listener {
    try {
        auto objcpp_result_ = ::demo::LoginCore::create(::djinni_generated::LoginListener::toCpp(listener));
        return ::djinni_generated::LoginCore::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)userLogin:(nonnull NSString *)account
         password:(nonnull NSString *)password {
    try {
        _cppRefHandle.get()->user_login(::djinni::String::toCpp(account),
                                        ::djinni::String::toCpp(password));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)userSign:(nonnull NSString *)account
        password:(nonnull NSString *)password {
    try {
        _cppRefHandle.get()->user_sign(::djinni::String::toCpp(account),
                                       ::djinni::String::toCpp(password));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)userLogout {
    try {
        _cppRefHandle.get()->user_logout();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)checkLoginStatus {
    try {
        _cppRefHandle.get()->check_login_status();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)checkConnection {
    try {
        _cppRefHandle.get()->check_connection();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto LoginCore::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto LoginCore::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<SCLoginCore>(cpp);
}

}  // namespace djinni_generated

@end
